---
openapi: "3.0.0"
info:
  title: "Service"
  description: "An API which lets us create, update, delete,fetch the services available."
  version: "1.0.0"
servers:
- url: "https://dev.senior-sunshine.com/services"
  description: "Development Server"
- url: "https://prod.senior-sunshine.com/services"
  description: "Production Server"
paths:
  /all:
    get:
      description: "Obtain all the services available for the users."
      parameters:
      - name: "bodyLimit"
        in: "query"
        description: "The number of services returned."
        required: false
        style: "form"
        explode: true
        schema:
          maximum: 2E+1
          minimum: 1E+1
          type: "integer"
          example: 16
      - name: "pageLimit"
        in: "query"
        description: "The pages to return services available."
        required: false
        style: "form"
        explode: true
        schema:
          maximum: 7
          minimum: 2
          type: "integer"
          example: 10
      responses:
        "200":
          description: "Successful pull of services."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "403":
          description: "Service not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /{service_id}:
    get:
      description: "Obtains info of a specific service."
      parameters:
      - name: "service_id"
        in: "path"
        description: "The id of the service."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "403":
          description: "Service not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    put:
      summary: "Updates the service info with the specified ID."
      parameters:
      - name: "service_id"
        in: "path"
        description: "The id of the service"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
        required: true
      responses:
        "200":
          description: "Successfully updated the service info."
        "400":
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "403":
          description: "Service not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    delete:
      summary: "Deletes the service with the specified ID."
      parameters:
      - name: "service_id"
        in: "path"
        description: "The id of the volunteer"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "204":
          description: "Service deleted."
        "403":
          description: "Service not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /add:
    post:
      description: "Creates a new service entry."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
        required: true
      responses:
        "200":
          description: "Successfully created a new service."
        "400":
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
components:
  schemas:
    Service:
      type: "object"
      properties:
        service_id:
          type: "integer"
        service_name:
          type: "string"
        category:
          type: "string"
    Response:
      type: "object"
      properties:
        message:
          type: "string"
  responses:
    "400Error":
      description: "Invalid request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response"
    "403Error":
      description: "Service not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response"
